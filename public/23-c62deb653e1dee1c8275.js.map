{"version":3,"sources":["webpack:///./node_modules/intersection-observer/intersection-observer.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/_string-trim.js","webpack:///./node_modules/core-js/modules/_string-ws.js"],"names":["__webpack_require__","window","document","IntersectionObserverEntry","prototype","Object","defineProperty","get","this","intersectionRatio","registry","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","target","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","_checkForIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","_monitoringIntersections","_monitoringInterval","setInterval","addEvent","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","removeEvent","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","top","bottom","left","right","width","height","forEach","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","time","performance","now","boundingClientRect","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","root","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","indexOf","index","splice","targetArea","intersectionArea","Number","toFixed","callback","opt_options","fn","timeout","timer","options","bind","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","el","err","child","parentNode","host","global","has","cof","inheritIfRequired","toPrimitive","fails","gOPN","f","gOPD","dP","$trim","trim","$Number","Base","proto","BROKEN_COF","TRIM","String","toNumber","argument","it","third","radix","maxCode","first","charCodeAt","NaN","code","digits","l","parseInt","arguments","that","valueOf","call","key","keys","j","constructor","$export","defined","spaces","space","ltrim","RegExp","rtrim","exporter","KEY","ALIAS","exp","FORCE","P","F","string","TYPE","replace","module","exports"],"mappings":"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","file":"23-c62deb653e1dee1c8275.js","sourcesContent":["require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function (window, document) {\n  'use strict'; // Exits early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n\n  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {\n        get: function get() {\n          return this.intersectionRatio > 0;\n        }\n      });\n    }\n\n    return;\n  }\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observing a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n\n\n  var registry = [];\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = entry.rootBounds;\n    this.boundingClientRect = entry.boundingClientRect;\n    this.intersectionRect = entry.intersectionRect || getEmptyRect();\n    this.isIntersecting = !!entry.intersectionRect; // Calculates the intersection ratio.\n\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height; // Sets intersection ratio.\n\n    if (targetArea) {\n      // Round the intersection ratio to avoid floating point math issues:\n      // https://github.com/w3c/IntersectionObserver/issues/324\n      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n\n\n  function IntersectionObserver(callback, opt_options) {\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    } // Binds and throttles `this._checkForIntersections`.\n\n\n    this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT); // Private properties.\n\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin); // Public properties.\n\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues.map(function (margin) {\n      return margin.value + margin.unit;\n    }).join(' ');\n  }\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n  /**\n   * Use a mutation observer on the root element\n   * to detect intersection changes.\n   */\n\n  IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n\n  IntersectionObserver.prototype.observe = function (target) {\n    var isTargetAlreadyObserved = this._observationTargets.some(function (item) {\n      return item.element == target;\n    });\n\n    if (isTargetAlreadyObserved) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n\n    this._observationTargets.push({\n      element: target,\n      entry: null\n    });\n\n    this._monitorIntersections();\n\n    this._checkForIntersections();\n  };\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n\n\n  IntersectionObserver.prototype.unobserve = function (target) {\n    this._observationTargets = this._observationTargets.filter(function (item) {\n      return item.element != target;\n    });\n\n    if (!this._observationTargets.length) {\n      this._unmonitorIntersections();\n\n      this._unregisterInstance();\n    }\n  };\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.disconnect = function () {\n    this._observationTargets = [];\n\n    this._unmonitorIntersections();\n\n    this._unregisterInstance();\n  };\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n\n\n  IntersectionObserver.prototype.takeRecords = function () {\n    var records = this._queuedEntries.slice();\n\n    this._queuedEntries = [];\n    return records;\n  };\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n\n\n  IntersectionObserver.prototype._initThresholds = function (opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n    return threshold.sort().filter(function (t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error('threshold must be a number between 0 and 1 inclusively');\n      }\n\n      return t !== a[i - 1];\n    });\n  };\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n\n\n  IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function (margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n\n      return {\n        value: parseFloat(parts[1]),\n        unit: parts[2]\n      };\n    }); // Handles shorthand.\n\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n    return margins;\n  };\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibility state is visible.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._monitorIntersections = function () {\n    if (!this._monitoringIntersections) {\n      this._monitoringIntersections = true; // If a poll interval is set, use polling instead of listening to\n      // resize and scroll events or DOM mutations.\n\n      if (this.POLL_INTERVAL) {\n        this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);\n      } else {\n        addEvent(window, 'resize', this._checkForIntersections, true);\n        addEvent(document, 'scroll', this._checkForIntersections, true);\n\n        if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n          this._domObserver = new MutationObserver(this._checkForIntersections);\n\n          this._domObserver.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n          });\n        }\n      }\n    }\n  };\n  /**\n   * Stops polling for intersection changes.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unmonitorIntersections = function () {\n    if (this._monitoringIntersections) {\n      this._monitoringIntersections = false;\n      clearInterval(this._monitoringInterval);\n      this._monitoringInterval = null;\n      removeEvent(window, 'resize', this._checkForIntersections, true);\n      removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this._domObserver) {\n        this._domObserver.disconnect();\n\n        this._domObserver = null;\n      }\n    }\n  };\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._checkForIntersections = function () {\n    var rootIsInDom = this._rootIsInDom();\n\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function (item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n\n      var rootContainsTarget = this._rootContainsTarget(target);\n\n      var oldEntry = item.entry;\n\n      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);\n\n      var newEntry = item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: rootRect,\n        intersectionRect: intersectionRect\n      });\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, rootRect) {\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n    var targetRect = getBoundingClientRect(target);\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot) {\n      var parentRect = null;\n      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {}; // If the parent isn't displayed, an intersection can't happen.\n\n      if (parentComputedStyle.display == 'none') return;\n\n      if (parent == this.root || parent == document) {\n        atRoot = true;\n        parentRect = rootRect;\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        if (parent != document.body && parent != document.documentElement && parentComputedStyle.overflow != 'visible') {\n          parentRect = getBoundingClientRect(parent);\n        }\n      } // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n\n\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n        if (!intersectionRect) break;\n      }\n\n      parent = getParentNode(parent);\n    }\n\n    return intersectionRect;\n  };\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {Object} The expanded root rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._getRootRect = function () {\n    var rootRect;\n\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight\n      };\n    }\n\n    return this._expandRectByRootMargin(rootRect);\n  };\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {Object} rect The rect object to expand.\n   * @return {Object} The expanded rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {\n    var margins = this._rootMarginValues.map(function (margin, i) {\n      return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3]\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n    return newRect;\n  };\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;\n    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1; // Ignore unchanged ratios\n\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i]; // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n\n      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {\n        return true;\n      }\n    }\n  };\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootIsInDom = function () {\n    return !this.root || containsDeep(document, this.root);\n  };\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootContainsTarget = function (target) {\n    return containsDeep(this.root || document, target);\n  };\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._registerInstance = function () {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unregisterInstance = function () {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n\n\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n  /**\n   * Throttles a function and delays its execution, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n\n\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function () {\n      if (!timer) {\n        timer = setTimeout(function () {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n\n\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n\n\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object} The intersection rect or undefined if no intersection\n   *     is found.\n   */\n\n\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n    return width >= 0 && height >= 0 && {\n      top: top,\n      bottom: bottom,\n      left: left,\n      right: right,\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {Object} The (possibly shimmed) rect of the element.\n   */\n\n\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {// Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect(); // Older IE\n\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    }\n\n    return rect;\n  }\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {Object} The empty rect.\n   */\n\n\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  /**\n   * Checks to see if a parent element contains a child element (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n\n\n  function containsDeep(parent, child) {\n    var node = child;\n\n    while (node) {\n      if (node == parent) return true;\n      node = getParentNode(node);\n    }\n\n    return false;\n  }\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n\n\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n\n    return parent;\n  } // Exposes the constructors globally.\n\n\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})(window, document);","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n"],"sourceRoot":""}